# syntax=docker/dockerfile:1
FROM nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04 AS build
LABEL Description="amber:22.22 build"

ENV TZ=America/Chicago \
    DEBIAN_FRONTEND=noninteractive \
    CUDA_HOME=/usr/local/cuda

WORKDIR /app
SHELL ["/bin/bash", "-c"]

COPY ./packages/22.22/Amber22.tar.bz2 \
     ./packages/22.22/AmberTools22.tar.bz2 ./

RUN tar xfj Amber22.tar.bz2 && rm Amber22.tar.bz2 && \
    tar xfj AmberTools22.tar.bz2 && rm AmberTools22.tar.bz2

# fix amber python error: http://archive.ambermd.org/202307/0077.html
RUN sed -i '/set(MINICONDA_INSTALLER_FILENAME "Miniconda${PYTHON_MAJOR_RELEASE}/i\\tset(MINICONDA_VERSION py310_23.5.2-0)' \
    /app/amber22_src/cmake/UseMiniconda.cmake

RUN apt-get update && \
    apt-get -y --no-install-recommends install vim python3 \
    tcsh make cmake gcc g++ gfortran \
    flex bison patch bc wget \
    xorg-dev libz-dev libbz2-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# serial - cpu
RUN cd amber22_src/build && \
    ./run_cmake && \
    make install

ENV AMBERHOME=/app/amber22 \
    PATH=/app/amber22/bin:${PATH} \
    LD_LIBRARY_PATH=/app/amber22/lib:${LD_LIBRARY_PATH} \
    PERL5LIB=/app/amber22/lib/perl:${PERL5LIB} \
    PYTHONPATH=/app/amber22/lib/python3.10/site-packages:${PYTHONPATH} \
    QUICK_BASIS=/app/amber22/AmberTools/src/quick/basis

RUN apt-get update && \
    apt-get -y --no-install-recommends install openmpi-bin libopenmpi-dev openssh-client && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV OMPI_ALLOW_RUN_AS_ROOT=1 \
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

# parallel - cpu
RUN cd amber22_src/build && \
    sed -i 's/-DMPI=FALSE/-DMPI=TRUE/g' run_cmake && \
    sed -i 's/-DCUDA=TRUE/-DCUDA=FALSE/g' run_cmake && \
    ./run_cmake && \
    make install

# serial - gpu
RUN cd amber22_src/build && \
    sed -i 's/-DMPI=TRUE/-DMPI=FALSE/g' run_cmake && \
    sed -i 's/-DCUDA=FALSE/-DCUDA=TRUE/g' run_cmake && \
    ./run_cmake && \
    make install

# parallel + gpu
RUN cd amber22_src/build && \
    sed -i 's/-DMPI=FALSE/-DMPI=TRUE/g' run_cmake && \
    sed -i 's/-DCUDA=FALSE/-DCUDA=TRUE/g' run_cmake && \
    ./run_cmake && \
    make install

# try to fix error in ./py_resp_test.run and ./Run.bar_pbsa
RUN /app/amber22/miniconda/bin/python3.10 -m pip install pyopenssl cryptography --upgrade

# Generate test scripts
RUN echo '#!/usr/bin/env bash' > test.sh && \
    echo 'mkdir -p /mnt/biopod.amber.22.22.test' >> test.sh && \
    echo 'cd $AMBERHOME && make test.serial > /mnt/biopod.amber.22.22.test/log.test.serial 2>&1' >> test.sh && \
    echo 'cd $AMBERHOME && export CUDA_VISIBLE_DEVICES=0 && make test.cuda.serial > /mnt/biopod.amber.22.22.test/log.test.cuda.serial 2>&1' >> test.sh && \
    echo 'cd $AMBERHOME && export DO_PARALLEL="mpirun -np 2" && make test.parallel > /mnt/biopod.amber.22.22.test/log.test.parallel.2 2>&1' >> test.sh && \
    echo 'cd $AMBERHOME && export DO_PARALLEL="mpirun -np 4" && make test.parallel > /mnt/biopod.amber.22.22.test/log.test.parallel.4 2>&1' >> test.sh && \
    echo 'cd $AMBERHOME && export DO_PARALLEL="mpirun -np 2" && make test.cuda.parallel > /mnt/biopod.amber.22.22.test/log.test.cuda.parallel 2>&1' >> test.sh


FROM nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04 AS runtime
LABEL Description="amber:22.22 runtime"

COPY --from=build /app/amber22 /app/amber22
COPY --from=build /app/test.sh /app/test.sh

ENV TZ=America/Chicago \
    DEBIAN_FRONTEND=noninteractive \
    CUDA_HOME=/usr/local/cuda \
    OMPI_ALLOW_RUN_AS_ROOT=1 \
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 \
    AMBERHOME=/app/amber22 \
    PATH=/app/amber22/bin:${PATH} \
    LD_LIBRARY_PATH=/app/amber22/lib:${LD_LIBRARY_PATH} \
    PERL5LIB=/app/amber22/lib/perl:${PERL5LIB} \
    PYTHONPATH=/app/amber22/lib/python3.10/site-packages:${PYTHONPATH} \
    QUICK_BASIS=/app/amber22/AmberTools/src/quick/basis

RUN apt-get update && \
    apt-get -y --no-install-recommends install vim python3 \
    tcsh make cmake gcc g++ gfortran \
    flex bison patch bc wget \
    xorg-dev libz-dev libbz2-dev \
    openmpi-bin libopenmpi-dev openssh-client && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /mnt
